// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkHubBackEndServices.Data;

#nullable disable

namespace WorkHubBackEndServices.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230701175859_SeedingData")]
    partial class SeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkHubBackEndServices.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Veg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Non-Veg"
                        });
                });

            modelBuilder.Entity("WorkHubBackEndServices.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Delicious vegetarian burger with fresh vegetables and sauce",
                            Name = "Veggie Burger",
                            Price = 120
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Marinated cottage cheese cubes grilled with spices",
                            Name = "Paneer Tikka",
                            Price = 180
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Thin crispy crepe made from fermented rice and lentil batter, served with chutney and sambar",
                            Name = "Masala Dosa",
                            Price = 100
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Flavorful rice dish cooked with chicken, aromatic spices, and herbs",
                            Name = "Chicken Biryani",
                            Price = 200
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Soft and spongy milk-based dessert soaked in sugar syrup",
                            Name = "Gulab Jamun",
                            Price = 80
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Creamy spinach curry with paneer (cottage cheese)",
                            Name = "Palak Paneer",
                            Price = 160
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "Tender chicken pieces cooked in a rich and creamy tomato-based sauce",
                            Name = "Butter Chicken",
                            Price = 220
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Crispy fried pastry filled with spiced potatoes and peas",
                            Name = "Samosa",
                            Price = 60
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "Grilled chicken in a creamy and flavorful tomato-based sauce",
                            Name = "Chicken Tikka Masala",
                            Price = 190
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Description = "Soft and creamy cheese dumplings in sweetened milk",
                            Name = "Rasmalai",
                            Price = 90
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Description = "Spicy chickpea curry served with deep-fried bread",
                            Name = "Chole Bhature",
                            Price = 140
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            Description = "Fish cooked in a tangy and flavorful curry",
                            Name = "Fish Curry",
                            Price = 180
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Description = "Indian bread stuffed with spiced mashed potatoes, served with yogurt or pickle",
                            Name = "Aloo Paratha",
                            Price = 80
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            Description = "Fragrant rice dish cooked with tender mutton pieces, aromatic spices, and herbs",
                            Name = "Mutton Biryani",
                            Price = 240
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            Description = "Traditional Indian dessert made with grated carrots, milk, and sugar",
                            Name = "Gajar Halwa",
                            Price = 100
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            Description = "Small crispy puris filled with spicy tangy water and potato mixture",
                            Name = "Pani Puri",
                            Price = 70
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            Description = "Peas and paneer (cottage cheese) cooked in a creamy and flavorful sauce",
                            Name = "Matar Paneer",
                            Price = 160
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            Description = "Spicy and flavorful deep-fried chicken dish",
                            Name = "Chicken 65",
                            Price = 180
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            Description = "Red kidney bean curry served with steamed rice",
                            Name = "Rajma Chawal",
                            Price = 120
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            Description = "Creamy and rich lentil curry made with black lentils and kidney beans",
                            Name = "Dal Makhani",
                            Price = 140
                        });
                });

            modelBuilder.Entity("WorkHubBackEndServices.Models.OrderModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderedForDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("WorkHubBackEndServices.Models.OrderModels.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("orderitems");
                });

            modelBuilder.Entity("WorkHubBackEndServices.Models.OrderModels.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Lunch"
                        });
                });

            modelBuilder.Entity("WorkHubBackEndServices.Models.Item", b =>
                {
                    b.HasOne("WorkHubBackEndServices.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WorkHubBackEndServices.Models.OrderModels.Order", b =>
                {
                    b.HasOne("WorkHubBackEndServices.Models.OrderModels.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("WorkHubBackEndServices.Models.OrderModels.OrderItem", b =>
                {
                    b.HasOne("WorkHubBackEndServices.Models.OrderModels.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("WorkHubBackEndServices.Models.OrderModels.MenuItemOrdered", "ItemOrdered", b1 =>
                        {
                            b1.Property<int>("OrderItemId")
                                .HasColumnType("int");

                            b1.Property<string>("CategoryType")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ItemName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("MenuItemId")
                                .HasColumnType("int");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("orderitems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("ItemOrdered");
                });

            modelBuilder.Entity("WorkHubBackEndServices.Models.OrderModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
